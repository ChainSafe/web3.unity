name: Check and Commit

on:
  workflow_call:

jobs:
  duplicate_samples_and_publish_dependencies:
    name: Duplicate Samples And Publish Dependencies
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - src/UnitySampleProject
        testMode:
          - PlayMode
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        ssh-key: ${{ secrets.DEPLOY_KEY }}
    - name: Configure Git
      run: |
        git config user.email $git_email
        git config user.name "${{ github.actor }}"
      env:
        git_email: "${{ github.actor }}@users.noreply.github.com"
    - name: Duplicate Web3 Unity Samples
      run: |
        export SOURCE_PATH=
        export DESTINATION_DIRECTORY=
        export DESTINATION_PATH=
        
        while IFS= read -r entry || [ -n "$entry" ];
        do
          source_prefix="source:"
          display_name_prefix="display_name:"
          destination_prefix="destination:"
        
          entry=$(echo "$entry" | sed -e 's/^[[:space:]]*//')
        
          if [[ $entry = $source_prefix* ]]
          then
            SOURCE_PATH=${entry#"$source_prefix"}
          elif [[ $entry = $display_name_prefix* ]]
          then
            DESTINATION_DIRECTORY=${entry#"$display_name_prefix"}
            SOURCE_PATH="${GITHUB_WORKSPACE}/$SOURCE_PATH/$(ls "$SOURCE_PATH" | head -n 1)/$DESTINATION_DIRECTORY"
          elif [[ $entry = $destination_prefix* ]]
          then
            DESTINATION_PATH="${GITHUB_WORKSPACE}/${entry#"$destination_prefix"}"
            rm -rf "$DESTINATION_PATH"
            mkdir -p "$DESTINATION_PATH"
            cp -r "$SOURCE_PATH/." "$DESTINATION_PATH"
            git add "$DESTINATION_PATH." -f
          fi
        done < "${GITHUB_WORKSPACE}/scripts/data/duplicate_samples.txt"
    - name: update submodules
      # clone submodules
      run: |
        git submodule update --init
      shell: bash
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Publish Solution DLLs
      run: |
        dotnet publish src/ChainSafe.Gaming.Unity/ChainSafe.Gaming.Unity.csproj -c Release /property:Unity=true
    - name: Move DLLs to Unity Packages
      run: |

        export PUBLISH_PATH="${GITHUB_WORKSPACE}/${{ vars.PUBLISH_PATH }}"

        echo -e "DLLs Generated\n$(ls "$PUBLISH_PATH")"

        export DLL_META_FILE_TEMPLATE="${{ vars.DLL_META_FILE_TEMPLATE }}"

        export PACKAGE_LIB_PATH=

        while IFS= read -r entry || [ -n "$entry" ];
        do
          if [[ $entry == *: ]]
          then
            PACKAGE_LIB_PATH="${GITHUB_WORKSPACE}/${entry%:}"
            if [ -d "$PACKAGE_LIB_PATH" ]; then
              rm -rf "$PACKAGE_LIB_PATH"*.dll
              rm -rf "$PACKAGE_LIB_PATH"*.pdb
            else
              mkdir -p "$PACKAGE_LIB_PATH"
            fi
          else
            export DEPENDENCY=$(echo "$entry" | tr -d '\t' | tr -d ' ')
            cp "$PUBLISH_PATH/$DEPENDENCY".dll $PACKAGE_LIB_PATH
            if ! [ -f "$PACKAGE_LIB_PATH$DEPENDENCY.dll.meta" ]; then
              echo -e "${DLL_META_FILE_TEMPLATE/"[[assetGuid]]"/"$(uuidgen | tr -d '-')"}" >> "$PACKAGE_LIB_PATH$DEPENDENCY.dll.meta"
            fi
          fi
          git add "$PACKAGE_LIB_PATH." -f
        done < "${GITHUB_WORKSPACE}/scripts/data/published_dependencies.txt"
    - uses: actions/cache@v2
      with:
        path: ${{ matrix.projectPath }}/Library
        key: Library-${{ matrix.projectPath }}
        restore-keys: |
          Library-
    - uses: game-ci/unity-test-runner@v3
      id: tests
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      with:
        projectPath: ${{ matrix.projectPath }}
        customImage: 'unityci/editor:ubuntu-2022.3.26f1-linux-il2cpp-3.1.0'
        testMode: ${{ matrix.testMode }}
        artifactsPath: ${{ matrix.testMode }}-artifacts
        githubToken: ${{ secrets.GITHUB_TOKEN }}
        checkName: ${{ matrix.testMode }} Test Results
        coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;'
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Test results for ${{ matrix.testMode }}
        path: ${{ steps.tests.outputs.artifactsPath }}
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Coverage results for ${{ matrix.testMode }}
        path: ${{ steps.tests.outputs.coveragePath }}
    - name: Commit and Push changes
      if: ${{ github.ref_name == 'dev' }}
      run: |
        git diff-index --cached --quiet HEAD || git commit -m 'Auto Commit [skip ci]
        - Duplicate Packages Samples
        - Publish DLL Dependencies'
        git push -f