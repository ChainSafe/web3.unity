name: Check and Commit

on:
  workflow_call:

jobs:
  duplicate_samples_and_publish_dependencies:
    name: Duplicate Samples And Publish Dependencies
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - src/UnitySampleProject
        testMode:
          - PlayMode
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        ssh-key: ${{ secrets.DEPLOY_KEY }}
    - name: Set up SSH keys
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.DEPLOY_KEY }}
    - name: Configure Git
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
    - name: Duplicate Web3 Unity Samples
      run: |
        export SOURCE_PATH=
        export DESTINATION_DIRECTORY=
        export DESTINATION_PATH=
        
        export DUPLICATE_SAMPLE_VARS=${{ vars.DUPLICATE_SAMPLE_VARS }}
        
        for entry in "${DUPLICATE_SAMPLE_VARS[@]}"
        do
          IFS=':' read -ra dirs <<< "$entry"
          SOURCE_PATH=${dirs[0]}
          DESTINATION_DIRECTORY=${dirs[1]}
          
          SOURCE_PATH="${GITHUB_WORKSPACE}/$SOURCE_PATH/$(ls "$SOURCE_PATH" | head -n 1)/$DESTINATION_DIRECTORY"
        
          DESTINATION_PATH="${GITHUB_WORKSPACE}/${dirs[2]}"
          
          rm -rf "$DESTINATION_PATH"
          mkdir -p "$DESTINATION_PATH"
          cp -r "$SOURCE_PATH/." "$DESTINATION_PATH"
        
          git add "$DESTINATION_PATH." -f
        done
    - name: update submodules
      # clone submodules
      run: |
        git submodule update --init
      shell: bash
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Publish Solution DLLs
      run: |
        dotnet publish src/ChainSafe.Gaming.Unity/ChainSafe.Gaming.Unity.csproj -c Release /property:Unity=true
    - name: Move DLLs to Unity Packages
      run: |

        export PUBLISH_PATH="${GITHUB_WORKSPACE}/${{ vars.PUBLISH_PATH }}"

        echo -e "DLLs Generated\n$(ls "$PUBLISH_PATH")"

        export PACKAGE_DEPENDENCIES=($(<${GITHUB_WORKSPACE}/scripts/data/published_dependencies.txt))

        PACKAGE_DEPENDENCIES="${PACKAGE_DEPENDENCIES//$'\n'/ }"
        PACKAGE_DEPENDENCIES="${PACKAGE_DEPENDENCIES//$'\r'/}"

        export DLL_META_FILE_TEMPLATE="${{ vars.DLL_META_FILE_TEMPLATE }}"

        for entry in "${PACKAGE_DEPENDENCIES[@]}"
        do
          IFS=':' read -ra dirs <<< "$entry"
          export PACKAGE_LIB_PATH="${GITHUB_WORKSPACE}/${dirs[0]}"

          if [ -d "$PACKAGE_LIB_PATH" ]; then
            rm "$PACKAGE_LIB_PATH"*.dll
          else
            mkdir -p "$PACKAGE_LIB_PATH"
          fi

          IFS=';' read -ra dependencies <<< "${dirs[1]}"

          for dependency in "${dependencies[@]}"
          do
            cp "$PUBLISH_PATH/$dependency.dll" $PACKAGE_LIB_PATH
            if ! [ -f "$PACKAGE_LIB_PATH$dependency.dll.meta" ]; then
              echo -e "${DLL_META_FILE_TEMPLATE/"[[assetGuid]]"/"$(uuidgen | tr -d '-')"}" >> "$PACKAGE_LIB_PATH$dependency.dll.meta"
            fi
          done

          git add "$PACKAGE_LIB_PATH." -f
        done
    - uses: actions/cache@v2
      with:
        path: ${{ matrix.projectPath }}/Library
        key: Library-${{ matrix.projectPath }}
        restore-keys: |
          Library-
    - uses: game-ci/unity-test-runner@v3
      id: tests
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      with:
        projectPath: ${{ matrix.projectPath }}
        testMode: ${{ matrix.testMode }}
        artifactsPath: ${{ matrix.testMode }}-artifacts
        githubToken: ${{ secrets.GITHUB_TOKEN }}
        checkName: ${{ matrix.testMode }} Test Results
        coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;'
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Test results for ${{ matrix.testMode }}
        path: ${{ steps.tests.outputs.artifactsPath }}
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Coverage results for ${{ matrix.testMode }}
        path: ${{ steps.tests.outputs.coveragePath }}
    - name: Commit and Push changes
      if: ${{ github.ref_name == 'dev' }}
      run: |
        git diff-index --cached --quiet HEAD || git commit -m 'Auto Commit
        - Duplicate Packages Samples
        - Publish DLL Dependencies'
        git push -f