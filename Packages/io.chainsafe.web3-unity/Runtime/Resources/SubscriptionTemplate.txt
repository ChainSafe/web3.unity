            {ETH_LOG_CLIENT_NAME} = new EthLogsObservableSubscription(_webSocketClient);
            
            {ETH_LOG_CLIENT_NAME}.GetSubscriptionDataResponsesAsObservable().Subscribe(log =>
            {
                try
                {
                    var decoded = Event<{CLASS_DTO_NAME}>.DecodeEvent(log);
                    if (decoded != null)
                    {
                       {EVENT_NAME}?.Invoke(decoded.Event);
                    }  
                }
                catch (Exception ex)
                {
                    Debug.LogError("Log Address: " + log.Address + " is not a standard transfer log:" + ex.Message);
                }
            });
            
            await {ETH_LOG_CLIENT_NAME}.SubscribeAsync({FILTER});