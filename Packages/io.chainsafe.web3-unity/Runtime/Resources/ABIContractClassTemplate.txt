using System.Threading.Tasks;
using ChainSafe.Gaming.Evm.Transactions;
using Nethereum.Hex.HexTypes;
using ChainSafe.Gaming.Evm.Contracts;

namespace ChainSafe.Gaming.Evm.Contracts.Custom
{
    public class {CLASS_NAME} : ICustomContract
    {
       
        private string ABI => {CONTRACT_ABI};
        
        public string Address { get; set; }
        
        public IContractBuilder ContractBuilder { get; set; }

        Contract OriginalContract { get; set; }
        
        {EVENTS}
        
        {METHODS}
        
        {EVENT_METHODS}
        
        #region Interface Implemented Methods
        
        public IContract Attach(string address)
        {
            return _contract.Attach(address);
        }

        public Task<object[]> Call(string method, object[] parameters = null, TransactionRequest overwrite = null)
        {
            return _contract.Call(method, parameters, overwrite);
        }

        public object[] Decode(string method, string output)
        {
            return _contract.Decode(method, output);
        }

        public Task<object[]> Send(string method, object[] parameters = null, TransactionRequest overwrite = null)
        {
            return _contract.Send(method, parameters, overwrite);
        }

        public Task<(object[] response, TransactionReceipt receipt)> SendWithReceipt(string method, object[] parameters = null, TransactionRequest overwrite = null)
        {
            return _contract.SendWithReceipt(method, parameters, overwrite);
        }

        public Task<HexBigInteger> EstimateGas(string method, object[] parameters, TransactionRequest overwrite = null)
        {
            return _contract.EstimateGas(method, parameters, overwrite);
        }

        public string Calldata(string method, object[] parameters = null)
        {
            return _contract.Calldata(method, parameters);
        }

        public Task<TransactionRequest> PrepareTransactionRequest(string method, object[] parameters, TransactionRequest overwrite = null)
        {
            return _contract.PrepareTransactionRequest(method, parameters, overwrite);
        }
        #endregion
    }
}
