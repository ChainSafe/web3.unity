{"version":3,"sources":["web3gl/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["web3","window","web3gl","connect","connectAccount","sendContract","sendContractResponse","signMessage","signMessageResponse","network","onboard","Onboard","networkName","web3NetworkName","networkId","web3NetworkId","subscriptions","wallet","Web3","provider","console","log","name","walletSelect","wallets","walletName","preferred","infuraKey","a","walletCheck","eth","getAccounts","message","from","personal","sign","signature","method","abi","contract","args","value","gas","Contract","JSON","parse","methods","send","on","transactionHash","error","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ggBAGIA,E,uGA4BJC,OAAOC,OAAS,CACdC,Q,2CACAC,eAAgB,GAChBC,a,sDACAC,qBAAsB,GACtBC,Y,4CACAC,oBAAqB,GACrBC,QAAS,GAIX,IAAMC,EAAUC,YAAQ,CACtBC,YAAaX,OAAOY,gBACpBC,UAAWb,OAAOc,cAClBC,cAAe,CACbC,OAAQ,SAACA,GACPjB,EAAO,IAAIkB,IAAKD,EAAOE,UACvBC,QAAQC,IAAR,UAAeJ,EAAOK,KAAtB,uBAEFb,QAAS,SAACA,GACRR,OAAOC,OAAOO,QAAUA,IAG5Bc,aAAc,CACZC,QAAS,CACP,CAAEC,WAAY,WAAYC,WAAW,GACrC,CACED,WAAY,gBACZE,UAAW,mCACXD,WAAW,GAEb,CAAED,WAAY,QAASC,WAAW,O,4CAMxC,sBAAAE,EAAA,+EAEUlB,EAAQa,eAFlB,uBAGUb,EAAQmB,cAHlB,uBAI0C7B,EAAK8B,IAAIC,cAJnD,OAII9B,OAAOC,OAAOE,eAJlB,OAIkE,GAJlE,kDAMIgB,QAAQC,IAAR,MANJ,2D,kEAcA,WAA2BW,GAA3B,iBAAAJ,EAAA,+EAEgC5B,EAAK8B,IAAIC,cAFzC,cAEUE,EAFV,OAEwD,GAFxD,SAGoCjC,EAAK8B,IAAII,SAASC,KAAKH,EAASC,EAAM,IAH1E,OAGUG,EAHV,OAIInC,OAAOC,OAAOM,oBAAsB4B,EACpChB,QAAQC,IAAIpB,OAAOC,OAAOM,qBAL9B,kDAOIP,OAAOC,OAAOM,oBAAsB,KAAMwB,QAP9C,2D,kEAoBA,WACEK,EACAC,EACAC,EACAC,EACAC,EACAC,GANF,iBAAAd,EAAA,6DAQER,QAAQC,IAAI,CAAEgB,SAAQC,MAAKC,WAAUC,OAAMC,QAAOC,QARpD,SASsB1C,EAAK8B,IAAIC,cAT/B,OASQE,EATR,OAS8C,IAC5C,MAAIjC,EAAK8B,IAAIa,SAASC,KAAKC,MAAMP,GAAMC,GAAUO,SAAQT,GAAzD,oBACKO,KAAKC,MAAML,KAEbO,KAAK,CAAEd,OAAMQ,QAAOC,QACpBM,GAAG,mBAAmB,SAACC,GACtBhD,OAAOC,OAAOI,qBAAuB2C,KAEtCD,GAAG,SAAS,SAACE,GACZjD,OAAOC,OAAOI,qBAAuB4C,EAAMlB,WAlBjD,4C,kCChGemB,MAJf,WACE,OAAO,yBCWMC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,gCAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fedd81a0.chunk.js","sourcesContent":["import Onboard from \"bnc-onboard\";\nimport Web3 from \"web3\";\n\nlet web3: Web3;\n\n// declare types\ndeclare global {\n  interface Window {\n    web3NetworkName: string; // network.js\n    web3NetworkId: number; // network.js\n    web3gl: Web3GL;\n  }\n}\ninterface Web3GL {\n  connect: () => void;\n  connectAccount: string;\n  sendContract: (\n    method: string,\n    abi: string,\n    contract: string,\n    args: string,\n    value: string,\n    gas: string\n  ) => void;\n  sendContractResponse: string;\n  signMessage: (message: string) => void;\n  signMessageResponse: string;\n  network: number;\n}\n\n// global variables\nwindow.web3gl = {\n  connect,\n  connectAccount: \"\",\n  sendContract,\n  sendContractResponse: \"\",\n  signMessage,\n  signMessageResponse: \"\",\n  network: 0,\n};\n\n// https://docs.blocknative.com/onboard\nconst onboard = Onboard({\n  networkName: window.web3NetworkName, // from network.js\n  networkId: window.web3NetworkId, // from network.js\n  subscriptions: {\n    wallet: (wallet) => {\n      web3 = new Web3(wallet.provider);\n      console.log(`${wallet.name} is now connected`);\n    },\n    network: (network) => {\n      window.web3gl.network = network;\n    },\n  },\n  walletSelect: {\n    wallets: [\n      { walletName: \"metamask\", preferred: true },\n      {\n        walletName: \"walletConnect\",\n        infuraKey: \"2d0062a43e9e4086829df115488b45a8\",\n        preferred: true,\n      },\n      { walletName: \"torus\", preferred: true },\n    ],\n  },\n});\n\n// call window.web3gl.connect() to display onboardjs modal\nasync function connect() {\n  try {\n    await onboard.walletSelect();\n    await onboard.walletCheck();\n    window.web3gl.connectAccount = (await web3.eth.getAccounts())[0];\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n/*\nsign message to verify user address.\nwindow.web3gl.signMessage(\"hello\")\n*/\nasync function signMessage(message: string) {\n  try {\n    const from: string = (await web3.eth.getAccounts())[0];\n    const signature: string = await web3.eth.personal.sign(message, from, \"\");\n    window.web3gl.signMessageResponse = signature;\n    console.log(window.web3gl.signMessageResponse);\n  } catch (error: any) {\n    window.web3gl.signMessageResponse = error.message;\n  }\n}\n\n/*\nconst method = \"increment\"\nconst abi = `[ { \"inputs\": [], \"name\": \"increment\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"x\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" } ]`;\nconst contract = \"0xB6B8bB1e16A6F73f7078108538979336B9B7341C\"\nconst args = \"[]\"\nconst value = \"0\"\nconst gas = \"1000000\" // gas limit\nwindow.web3gl.sendContract(method, abi, contract, args, value, gas)\n*/\nasync function sendContract(\n  method: string,\n  abi: string,\n  contract: string,\n  args: string,\n  value: string,\n  gas: string\n) {\n  console.log({ method, abi, contract, args, value, gas });\n  const from = (await web3.eth.getAccounts())[0];\n  new web3.eth.Contract(JSON.parse(abi), contract).methods[method](\n    ...JSON.parse(args)\n  )\n    .send({ from, value, gas })\n    .on(\"transactionHash\", (transactionHash: any) => {\n      window.web3gl.sendContractResponse = transactionHash;\n    })\n    .on(\"error\", (error: any) => {\n      window.web3gl.sendContractResponse = error.message;\n    });\n}\n","import \"./web3gl\"\n\nfunction App() {\n  return <div></div>;\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}