{"version":3,"sources":["web3gl/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["web3","window","web3gl","login","loginMessage","sendContract","sendContractResponse","signMessage","signMessageResponse","onboard","Onboard","dappId","networkName","web3NetworkName","networkId","web3NetworkId","subscriptions","wallet","Web3","provider","console","log","name","walletSelect","wallets","walletName","preferred","infuraKey","a","walletCheck","signLoginMessage","eth","getAccounts","from","expiration","Math","round","Date","now","toString","message","personal","sign","signature","method","abi","contract","args","value","Contract","JSON","parse","methods","send","on","transactionHash","error","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ggBAGIA,E,uGA0BJC,OAAOC,OAAS,CACdC,M,2CACAC,aAAc,GACdC,a,oDACAC,qBAAsB,GACtBC,Y,4CACAC,oBAAqB,IAIvB,IAAMC,EAAUC,YAAQ,CACtBC,OAAQ,uCACRC,YAAaX,OAAOY,gBACpBC,UAAWb,OAAOc,cAClBC,cAAe,CACbC,OAAQ,SAACA,GACPjB,EAAO,IAAIkB,IAAKD,EAAOE,UACvBC,QAAQC,IAAR,UAAeJ,EAAOK,KAAtB,wBAGJC,aAAc,CACZC,QAAS,CACP,CAAEC,WAAY,WAAYC,WAAW,GACrC,CACED,WAAY,gBACZE,UAAW,mCACXD,WAAW,GAEb,CAAED,WAAY,QAASC,WAAW,O,4CAMxC,sBAAAE,EAAA,+EAEUnB,EAAQc,eAFlB,uBAGUd,EAAQoB,cAHlB,OAIIC,IAJJ,gDAMIV,QAAQC,IAAR,MANJ,0D,+BAWeS,I,2EAAf,kCAAAF,EAAA,sEAC8B5B,EAAK+B,IAAIC,cADvC,cACQC,EADR,OACsD,GAC9CC,EAAqBC,KAAKC,MAAMC,KAAKC,MAAQ,IAAO,KAAKC,WACzDC,EAHR,UAG6BP,EAH7B,YAGqCC,GAHrC,SAIkClC,EAAK+B,IAAIU,SAASC,KAAKF,EAASP,EAAM,IAJxE,OAIQU,EAJR,OAKE1C,OAAOC,OAAOE,aAAd,UAAgCuC,EAAhC,YAA6CV,EAA7C,YAAqDC,GACrDd,QAAQC,IAAIpB,OAAOC,OAAOE,cAN5B,6C,kEAaA,WAA2BoC,GAA3B,iBAAAZ,EAAA,+EAEgC5B,EAAK+B,IAAIC,cAFzC,cAEUC,EAFV,OAEwD,GAFxD,SAGoCjC,EAAK+B,IAAIU,SAASC,KAAKF,EAASP,EAAM,IAH1E,OAGUU,EAHV,OAII1C,OAAOC,OAAOM,oBAAsBmC,EACpCvB,QAAQC,IAAIpB,OAAOC,OAAOM,qBAL9B,kDAOIP,OAAOC,OAAOM,oBAAsB,KAAMgC,QAP9C,2D,kEAoBA,WACEI,EACAC,EACAC,EACAC,EACAC,GALF,iBAAApB,EAAA,6DAOER,QAAQC,IAAI,CAAEuB,SAAQC,MAAKC,WAAUC,OAAMC,UAP7C,SAQsBhD,EAAK+B,IAAIC,cAR/B,OAQQC,EARR,OAQ8C,IAC5C,MAAIjC,EAAK+B,IAAIkB,SAASC,KAAKC,MAAMN,GAAMC,GAAUM,SAAQR,GAAzD,oBACKM,KAAKC,MAAMJ,KAEbM,KAAK,CAAEpB,OAAMe,UACbM,GAAG,mBAAmB,SAACC,GACtBtD,OAAOC,OAAOI,qBAAuBiD,KAEtCD,GAAG,SAAS,SAACE,GACZvD,OAAOC,OAAOI,qBAAuBkD,EAAMhB,WAjBjD,4C,kCCrGeiB,MAJf,WACE,OAAO,yBCWMC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,gCAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2e0b3898.chunk.js","sourcesContent":["import Onboard from \"bnc-onboard\";\nimport Web3 from \"web3\";\n\nlet web3: Web3;\n\n// declare types\ndeclare global {\n  interface Window {\n    web3NetworkName: string; // network.js\n    web3NetworkId: number; // network.js\n    web3gl: Web3GL;\n  }\n}\ninterface Web3GL {\n  login: () => void;\n  loginMessage: string;\n  sendContract: (\n    method: string,\n    abi: string,\n    contract: string,\n    args: string,\n    value: string\n  ) => void;\n  sendContractResponse: string;\n  signMessage: (message: string) => void;\n  signMessageResponse: string;\n}\n\n// global variables\nwindow.web3gl = {\n  login,\n  loginMessage: \"\",\n  sendContract,\n  sendContractResponse: \"\",\n  signMessage,\n  signMessageResponse: \"\",\n};\n\n// https://docs.blocknative.com/onboard\nconst onboard = Onboard({\n  dappId: \"abfa7356-64c3-4047-a6e1-cdb39a0c691e\",\n  networkName: window.web3NetworkName, // from network.js\n  networkId: window.web3NetworkId, // from network.js\n  subscriptions: {\n    wallet: (wallet) => {\n      web3 = new Web3(wallet.provider);\n      console.log(`${wallet.name} is now connected`);\n    },\n  },\n  walletSelect: {\n    wallets: [\n      { walletName: \"metamask\", preferred: true },\n      {\n        walletName: \"walletConnect\",\n        infuraKey: \"6429a308b4d646399b1ea170bb406c61\",\n        preferred: true,\n      },\n      { walletName: \"torus\", preferred: true },\n    ],\n  },\n});\n\n// call window.web3gl.login() to display onboardjs modal\nasync function login() {\n  try {\n    await onboard.walletSelect();\n    await onboard.walletCheck();\n    signLoginMessage();\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// generate and save message for login scene\nasync function signLoginMessage() {\n  const from: string = (await web3.eth.getAccounts())[0];\n  const expiration: string = Math.round(Date.now() / 1000 + 300).toString();\n  const message: string = `${from}-${expiration}`;\n  const signature: string = await web3.eth.personal.sign(message, from, \"\");\n  window.web3gl.loginMessage = `${signature}-${from}-${expiration}`;\n  console.log(window.web3gl.loginMessage);\n}\n\n/*\nsign message to verify user address.\nweb3gl.signMessage(\"hello\")\n*/\nasync function signMessage(message: string) {\n  try {\n    const from: string = (await web3.eth.getAccounts())[0];\n    const signature: string = await web3.eth.personal.sign(message, from, \"\");\n    window.web3gl.signMessageResponse = signature;\n    console.log(window.web3gl.signMessageResponse);\n  } catch (error) {\n    window.web3gl.signMessageResponse = error.message;\n  }\n}\n\n/*\nsend eth and call any contract\nconst method = \"increment\"\nconst abi = [ { \"inputs\": [], \"name\": \"increment\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"x\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" } ]\nconst contract = \"0xB6B8bB1e16A6F73f7078108538979336B9B7341C\"\nconst args = []\nconst value = \"0\"\nwindow.web3gl.callContract(abi, contract, args)\n*/\nasync function sendContract(\n  method: string,\n  abi: string,\n  contract: string,\n  args: string,\n  value: string\n) {\n  console.log({ method, abi, contract, args, value });\n  const from = (await web3.eth.getAccounts())[0];\n  new web3.eth.Contract(JSON.parse(abi), contract).methods[method](\n    ...JSON.parse(args)\n  )\n    .send({ from, value })\n    .on(\"transactionHash\", (transactionHash: any) => {\n      window.web3gl.sendContractResponse = transactionHash;\n    })\n    .on(\"error\", (error: any) => {\n      window.web3gl.sendContractResponse = error.message;\n    });\n}\n","import \"./web3gl\"\n\nfunction App() {\n  return <div></div>;\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}